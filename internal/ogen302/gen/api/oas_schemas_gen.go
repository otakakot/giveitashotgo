// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/url"
)

// AFound is response for A operation.
type AFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *AFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *AFound) SetLocation(val OptURI) {
	s.Location = val
}

func (*AFound) aRes() {}

// AInternalServerError is response for A operation.
type AInternalServerError struct{}

func (*AInternalServerError) aRes() {}

// BInternalServerError is response for B operation.
type BInternalServerError struct{}

func (*BInternalServerError) bRes() {}

// BOK is response for B operation.
type BOK struct{}

func (*BOK) bRes() {}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
