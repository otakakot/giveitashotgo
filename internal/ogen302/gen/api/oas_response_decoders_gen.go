// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeAResponse(resp *http.Response) (res ARes, _ error) {
	switch resp.StatusCode {
	case 302:
		// Code 302.
		var wrapper AFound
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "Location" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "Location",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						var wrapperDotLocationVal url.URL
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToURL(val)
							if err != nil {
								return err
							}

							wrapperDotLocationVal = c
							return nil
						}(); err != nil {
							return err
						}
						wrapper.Location.SetTo(wrapperDotLocationVal)
						return nil
					}); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse Location header")
			}
		}
		return &wrapper, nil
	case 500:
		// Code 500.
		return &AInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeBResponse(resp *http.Response) (res BRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &BOK{}, nil
	case 500:
		// Code 500.
		return &BInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
